1705182845
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3A9a1dd8c86615af1c8bf0ecfea4aaee53-a23d401c239dc0d3a99c2b0e6b524ec2
s:21164:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImEyM2Q0MDFjMjM5ZGMwZDNhOTljMmIwZTZiNTI0ZWMyIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6OToidGFza3MucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MTU6InBhZ2VzL3Rhc2tzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTQ5Nzk6IjwhRE9DVFlQRSBodG1sPg0KPGh0bWwgbGFuZz0iZW4iPg0KDQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPg0KICAgIDwhLS0gTElCUkVSw41BUyAgLS0+DQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjYuMC5taW4uanMiPjwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHBvcHBlcmpzL2NvcmVAMi45LjIvZGlzdC91bWQvcG9wcGVyLm1pbi5qcyINCiAgICAgICAgaW50ZWdyaXR5PSJzaGEzODQtSVFzb0xYbDVQSUxGaG9zVk51YnE1TEM3UWI5RFhnREE5aSt0UThaajNpd1dBd1B0Z0ZUeGJKOE5UNEdOMVI4cCINCiAgICAgICAgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjMuMC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzcyI+DQoNCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXBANS4zLjAvZGlzdC9qcy9ib290c3RyYXAuYnVuZGxlLm1pbi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vYm9vdHN0cmFwLWljb25zQDEuNy4yL2ZvbnQvYm9vdHN0cmFwLWljb25zLmNzcyI+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNi4wLjAtYmV0YTMvY3NzL2FsbC5taW4uY3NzIj4NCiAgICA8IS0tIFRlbcOhdGljYSBjb2xvciBjbGFybyBwb3IgZGVmZWN0byAgLS0+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIuLi9zdHlsZXMvU3R5bGVzQ2xhcm8uY3NzP3Y9MiIgaWQ9ImNsYXJvIj4NCiAgICA8IS0tIFRlbcOhdGljYXMgYWRpY2lvbmFsZXMgZGVzaGFiaWxpdGFkYXMgaW5pY2lhbG1lbnRlIC0tPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLi4vc3R5bGVzL1N0eWxlc09zY3Vyby5jc3M/dj0yIiBpZD0ib3NjdXJvIiBkaXNhYmxlZD4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4uL3N0eWxlcy9TdHlsZXNDYWxpZG8uY3NzP3Y9MiIgaWQ9ImNhbGlkbyIgZGlzYWJsZWQ+DQogICAgPHRpdGxlPlR1cnJvblRhc2tlcjogVG9kYXMgbGFzIHRhcmVhczwvdGl0bGU+DQo8L2hlYWQ+DQoNCjxib2R5Pg0KICAgIDw/cGhwDQogICAgaW5jbHVkZSgiLi4vaW5jbHVkZXMvaGVhZGVyLnBocCIpOw0KICAgID8+DQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgPCEtLSAvLypidXNjYWRvciAgLS0+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC01Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+DQogICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249IiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIG1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic2VhcmNoIiBjbGFzcz0iZm9ybS1jb250cm9sIHJvdW5kZWQiIG5hbWU9InNlYXJjaCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkJ1c2NhciBwb3Igbm9tYnJlIGRlIHRhcmVhIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1hcHBlbmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSByb3VuZGVkIG14LTEiIHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0Ij5CdXNjYXI8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAvLyBGb3JtdWxhcmlvIHBhcmEgZWwgZmlsdHJvIGRlIG9yZGVuYWNpw7NuDQogICAgICAgICAgICAgICAgZWNobyAnPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249IiI+JzsNCiAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1zbSBtYi0zIj4nOw0KICAgICAgICAgICAgICAgIGVjaG8gJzxzZWxlY3QgY2xhc3M9ImN1c3RvbS1zZWxlY3Qgcm91bmRlZCIgbmFtZT0ic29ydCI+JzsNCiAgICAgICAgICAgICAgICBlY2hvICc8b3B0aW9uIHZhbHVlPSJjYXRlZ29yeV9uYW1lIj5PcmRlbmFyIHBvciBjYXRlZ29yaWE8L29wdGlvbj4nOw0KICAgICAgICAgICAgICAgIGVjaG8gJzxvcHRpb24gdmFsdWU9ImR1ZV9kYXRlIj5PcmRlbmFyIHBvciBmZWNoYTwvb3B0aW9uPic7DQogICAgICAgICAgICAgICAgZWNobyAnPG9wdGlvbiB2YWx1ZT0idXNlcl9uYW1lIj5PcmRlbmFyIHBvciB1c3VhcmlvPC9vcHRpb24+JzsNCiAgICAgICAgICAgICAgICBlY2hvICc8L3NlbGVjdD4nOw0KICAgICAgICAgICAgICAgIGVjaG8gJzxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLWFwcGVuZCI+JzsNCiAgICAgICAgICAgICAgICBlY2hvICc8YnV0dG9uIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSByb3VuZGVkIG14LTEiIHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0Ij5CdXNjYXI8L2J1dHRvbj4nOw0KICAgICAgICAgICAgICAgIGVjaG8gJzwvZGl2Pic7DQogICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsNCiAgICAgICAgICAgICAgICBlY2hvICc8L2Zvcm0+JzsNCiAgICAgICAgICAgID8+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8IS0tIC8vKkNhcnRhcyBjb24gdGFyZWFzICAtLT4NCiAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LTUgYWxpZ24taXRlbXMtY2VudGVyIj4NCiAgICAgICAgICAgIDw/cGhwDQogICAgICAgICAgICAgICAgaW5jbHVkZSgnLi4vY29udHJvbGxlci9jb250cm9sbGVyRGF0YUJhc2UucGhwJyk7DQogICAgICAgICAgICAgICAgaWYgKCRfU0VSVkVSWyJSRVFVRVNUX01FVEhPRCJdID09ICJQT1NUIiAmJiBpc3NldCgkX1BPU1RbInN1Ym1pdCJdKSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBPYnRlbmVyIGxhIGNvbnN1bHRhIGRlIGLDunNxdWVkYSBkZWwgZm9ybXVsYXJpbw0KICAgICAgICAgICAgICAgICAgICBpZiAoJF9TRVJWRVJbIlJFUVVFU1RfTUVUSE9EIl0gPT0gIlBPU1QiICYmIGlzc2V0KCRfUE9TVFsic2VhcmNoIl0pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnkgPSAkX1BPU1RbInNlYXJjaCJdOw0KICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9IHNlYXJjaFRhc2tzSW5EYXRhYmFzZSgkcXVlcnksICJhbGwiKTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkX1NFUlZFUlsiUkVRVUVTVF9NRVRIT0QiXSA9PSAiUE9TVCIgJiYgaXNzZXQoJF9QT1NUWyJzb3J0Il0pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnkgPSAkX1BPU1RbInNvcnQiXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXN1bHQgPSBzZWFyY2hCeUZpbHRlcigkcXVlcnksICJhbGwiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRyZXN1bHQgPSBnZXRBbGxUYXNrcygiYWxsIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gSW1wcmltaXIgY2FydGEgcG9yIGNhZGEgdGFyZWENCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkcmVzdWx0IGFzICR0YXNrKXsNCiAgICAgICAgICAgICAgICAgICAgZWNobyAnDQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8vKkRpc2XDsW8gY2FydGEgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMyBjYXJkLWNvbnRhaW5lciIgZGF0YS1icy10b2dnbGU9Im1vZGFsIiBkYXRhLWJzLXRhcmdldD0iI2V4YW1wbGVNb2RhbCcuJHRhc2tbJ2lkJ10uJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBoLTEwMCB3LTEwMCB0ZXh0LWNlbnRlciBib3JkZXIgYm9yZGVyLWJsYWNrIG0tMiIgaWQ9ImlkQ2FyZCcuJHRhc2tbJ2lkJ10uJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4nLiR0YXNrWyduYW1lJ10uJzwvaDU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+Jy4kdGFza1snY2F0ZWdvcnlfbmFtZSddLic8L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+RmVjaGEgTGltaXRlOiAnLiR0YXNrWydkdWVfZGF0ZSddLic8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLypQb3B1cCBkZSBsYSBjYXJ0YSAoTW9kYWwpIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImV4YW1wbGVNb2RhbCcuJHRhc2tbJ2lkJ10uJyIgdGFiaW5kZXg9Ii0xIiBhcmlhLWxhYmVsbGVkYnk9ImV4YW1wbGVNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJleGFtcGxlTW9kYWxMYWJlbCI+Jy4kdGFza1snbmFtZSddLic8L2g1Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuJHRhc2tbJ2Rlc2NyaXB0aW9uJ10uJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPkNlcnJhcjwvYnV0dG9uPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRfU0VTU0lPTlsndXNlcmlkJ10pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkX1NFU1NJT05bJ3VzZXJpZCddID09ICR0YXNrWyd1c2VyX2NyZWF0b3InXSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEZvcm11bGFyaW8gcGFyYSBlbGltaW5hciBsYSB0YXJlYSBjb24gY29uZmlybWFjacOzbiAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIiIG9uc3VibWl0PSJyZXR1cm4gY29uZmlybURlbGV0ZSgpOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGVsZXRlVGFzayIgdmFsdWU9IicuJHRhc2tbJ2lkJ10uJyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLWRhbmdlciI+RWxpbWluYXI8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU2NyaXB0IGRlIEphdmFTY3JpcHQgcGFyYSBsYSBjb25maXJtYWNpw7NuIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb25maXJtRGVsZXRlKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maXJtKCLCv0VzdMOhcyBzZWd1cm8gZGUgcXVlIHF1aWVyZXMgZWxpbWluYXIgZXN0YSB0YXJlYT8iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0YXNrQXNzaWduZWRBbHJlYWR5ID0gaXNUYXNrQXNzaWduZWQoJHRhc2tbJ2lkJ10pOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGFza0Fzc2lnbmVkQWxyZWFkeSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZGlzYWJsZWQiPkFzaWduYWRhPC9idXR0b24+JzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1c2VySWQgPSAkX1NFU1NJT05bJ3VzZXJpZCddOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmaWNhciBjdcOhbnRhcyB0YXJlYXMgdGllbmUgYXNpZ25hZGFzIGVsIHVzdWFyaW8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1c2VyVGFza0NvdW50ID0gZ2V0VXNlclRhc2tDb3VudCgkdXNlcklkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHVzZXJUYXNrQ291bnQgPj0gNSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGRpc2FibGVkIj5Mw61taXRlIGFsY2FuemFkbzwvYnV0dG9uPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idGFza19pZCIgdmFsdWU9IicgLiAkdGFza1snaWQnXSAuICciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9ImFzc2lnbl90YXNrIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5Bc2lnbmFyIHRhcmVhPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vU29saWNpdGFyIGFzaWduYXIgdGFyZWE6DQogICAgICAgICAgICAgICAgaWYgKCRfU0VSVkVSWyJSRVFVRVNUX01FVEhPRCJdID09ICJQT1NUIiAmJiBpc3NldCgkX1BPU1RbJ2Fzc2lnbl90YXNrJ10pKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChpc3NldCgkX1NFU1NJT05bJ3VzZXJpZCddKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJHRhc2tJZCA9ICRfUE9TVFsndGFza19pZCddOw0KICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduVGFza1RvVXNlcigkX1NFU1NJT05bJ3VzZXJpZCddLCAkdGFza0lkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjxzY3JpcHQ+d2luZG93LmxvY2F0aW9uLmhyZWY9J3Rhc2tzLnBocCc8L3NjcmlwdD4iOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vIEVsaW1pbmFyIHRhcmVhOg0KICAgICAgICAgICAgICAgIGlmICgkX1NFUlZFUlsiUkVRVUVTVF9NRVRIT0QiXSA9PSAiUE9TVCIgJiYgaXNzZXQoJF9QT1NUWyJkZWxldGVUYXNrIl0pKSB7DQogICAgICAgICAgICAgICAgICAgICR0YXNrSWRUb0RlbGV0ZSA9ICRfUE9TVFsiZGVsZXRlVGFzayJdOw0KICAgICAgICAgICAgICAgICAgICBkZWxldGVUYXNrKCR0YXNrSWRUb0RlbGV0ZSk7DQogICAgICAgICAgICAgICAgICAgIC8vIERlc3B1w6lzIGRlIGVsaW1pbmFyLCByZWRpcmlnZSBvIGFjdHVhbGl6YSBsYSBww6FnaW5hIHNlZ8O6biBzZWEgbmVjZXNhcmlvDQogICAgICAgICAgICAgICAgICAgIGVjaG8gIjxzY3JpcHQ+d2luZG93LmxvY2F0aW9uLmhyZWY9J3Rhc2tzLnBocCc8L3NjcmlwdD4iOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgID8+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1hcHBlbmQiIHN0eWxlPSJtYXJnaW4tdG9wOiAyNXB4Ij4NCiAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgIGlmIChpc3NldCgkX1NFU1NJT05bJ3VzZXJpZCddKSkgew0KICAgICAgICAgICAgICAgICAgICBlY2hvICc8YnV0dG9uIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSByb3VuZGVkIG14LTEiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9Im1vZGFsIiBkYXRhLWJzLXRhcmdldD0iI251ZXZhVGFyZWFNb2RhbCI+ICsgTnVldmEgVGFyZWE8L2J1dHRvbj4nOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGVjaG8gJzxhIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSByb3VuZGVkIG14LTEiIGhyZWY9ImxvZ2luLnBocCI+ICsgTnVldmEgVGFyZWE8L2E+JzsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgPz4NCg0KDQogICAgICAgICAgICAgICAgPCEtLSBNb2RhbCBwYXJhIG51ZXZhIHRhcmVhIC0tPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJudWV2YVRhcmVhTW9kYWwiIHRhYmluZGV4PSItMSIgYXJpYS1sYWJlbGxlZGJ5PSJudWV2YVRhcmVhTW9kYWxMYWJlbCIgYXJpYS1oaWRkZW49InRydWUiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSIgaWQ9Im51ZXZhVGFyZWFNb2RhbExhYmVsIj5OdWV2YSBUYXJlYTwvaDU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRm9ybXVsYXJpbyBwYXJhIGxhIGNyZWFjacOzbiBkZSB0YXJlYSAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXNrTmFtZSIgY2xhc3M9ImZvcm0tbGFiZWwiPk5vbWJyZTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJ0YXNrTmFtZSIgbmFtZT0idGFza05hbWUiIG1heGxlbmd0aD0iMzIiIHJlcXVpcmVkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ0YXNrRGVzY3JpcHRpb24iIGNsYXNzPSJmb3JtLWxhYmVsIj5EZXNjcmlwY2nDs248L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0idGFza0Rlc2NyaXB0aW9uIiBuYW1lPSJ0YXNrRGVzY3JpcHRpb24iIG1heGxlbmd0aD0iMTI4IiByZXF1aXJlZD48L3RleHRhcmVhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkdWVEYXRlIiBjbGFzcz0iZm9ybS1sYWJlbCI+RmVjaGEgZGUgRW50cmVnYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImRhdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJkdWVEYXRlIiBuYW1lPSJkdWVEYXRlIiByZXF1aXJlZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY2F0ZWdvcnlUYXNrIiBjbGFzcz0iZm9ybS1sYWJlbCI+Q2F0ZWdvcsOtYTwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1zZWxlY3QiIGlkPSJjYXRlZ29yeVRhc2siIG5hbWU9ImNhdGVnb3J5VGFzayIgcmVxdWlyZWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMbGFtYXIgYSBsYSBmdW5jacOzbiBnZXRDYXRlZ29yaWVzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2F0ZWdvcmllcyA9IGdldENhdGVnb3JpZXMoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXIgb3BjaW9uZXMgZGVsIHNlbGVjdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjYXRlZ29yaWVzIGFzICRjYXRlZ29yeSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2F0ZWdvcnlOYW1lID0gJGNhdGVnb3J5WyduYW1lJ107DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjYXRlZ29yeUlEID0gJGNhdGVnb3J5WydpZCddOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8b3B0aW9uIHZhbHVlPSInIC4gJGNhdGVnb3J5SUQgLiAnIj4nIC4gJGNhdGVnb3J5TmFtZSAuICc8L29wdGlvbj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmFtZT0iY3JlYXRlVGFzayI+Q3JlYXIgVGFyZWE8L2J1dHRvbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+IA0KICAgICAgICANCiAgICAgICAgPD9waHANCiAgICAgICAgLy8gUHJvY2VzYXIgZWwgZm9ybXVsYXJpbyBjdWFuZG8gc2UgZW52w61hDQogICAgICAgIGlmICgkX1NFUlZFUlsiUkVRVUVTVF9NRVRIT0QiXSA9PSAiUE9TVCIgJiYgaXNzZXQoJF9QT1NUWyJjcmVhdGVUYXNrIl0pKSB7DQogICAgICAgICAgICAvLyBWYWxpZGFyIGNhbXBvcw0KICAgICAgICAgICAgJHRhc2tOYW1lID0gJF9QT1NUWyJ0YXNrTmFtZSJdOw0KICAgICAgICAgICAgJHRhc2tEZXNjcmlwdGlvbiA9ICRfUE9TVFsidGFza0Rlc2NyaXB0aW9uIl07DQogICAgICAgICAgICAkZHVlRGF0ZSA9ICRfUE9TVFsiZHVlRGF0ZSJdOw0KICAgICAgICAgICAgJGNhdGVnb3J5VGFzayA9ICRfUE9TVFsiY2F0ZWdvcnlUYXNrIl07DQoNCiAgICAgICAgICAgIGlmIChlbXB0eSgkdGFza05hbWUpIHx8IGVtcHR5KCR0YXNrRGVzY3JpcHRpb24pIHx8IGVtcHR5KCRkdWVEYXRlKSB8fCBlbXB0eSgkY2F0ZWdvcnlUYXNrKSkgew0KICAgICAgICAgICAgICAgIC8vIEFsIG1lbm9zIHVubyBkZSBsb3MgY2FtcG9zIGVzdMOhIHZhY8Otbw0KICAgICAgICAgICAgICAgIGVjaG8gIlBvciBmYXZvciwgY29tcGxldGEgdG9kb3MgbG9zIGNhbXBvcy4iOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAvLyBJbnNlcnRhciB0YXJlYSBlbiBsYSBiYXNlIGRlIGRhdG9zDQogICAgICAgICAgICAgICAgJGluc2VydFJlc3VsdCA9IGluc2VydFRhc2soJHRhc2tOYW1lLCAkdGFza0Rlc2NyaXB0aW9uLCAkZHVlRGF0ZSwgJGNhdGVnb3J5VGFzaywgJF9TRVNTSU9OWyd1c2VyaWQnXSk7DQogICAgICAgICAgICAgICAgZWNobyAiPHNjcmlwdD53aW5kb3cubG9jYXRpb24uaHJlZj0ndGFza3MucGhwJzwvc2NyaXB0PiI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgPz4NCiAgICAgICAgDQogICAgPC9kaXY+DQogICAgPD9waHANCiAgICBpbmNsdWRlKCIuLi9pbmNsdWRlcy9mb290ZXIucGhwIik7DQogICAgPz4NCiAgICA8L2Rpdj4NCiAgICA8c2NyaXB0IHNyYz0iLi4vanMvdGFza3MuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgc3JjPSIuLi9qcy9wcm9maWxlLmpzIj48L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4NCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";